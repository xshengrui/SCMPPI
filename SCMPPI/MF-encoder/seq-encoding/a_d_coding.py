from collections import Counter
import torch
# -*- coding: UTF-8 -*-
# import esm
import torch.nn as nn
import torch
import numpy as np
import gc  # Python的垃圾回收库，用于手动清理内存
from tqdm import tqdm

# 计算氨基酸组成（AAC）
def calculate_AAC(sequence):
    amino_acids = "ACDEFGHIKLMNPQRSTVWY"
    counts = Counter(sequence)
    total_count = len(sequence)
    aac = [counts.get(aa, 0) / total_count for aa in amino_acids]
    return aac

# 计算二肽组成（Dipeptide Composition）
def calculate_dipeptide_composition(sequence):
    amino_acids = "ACDEFGHIKLMNPQRSTVWY"
    dipeptides = [sequence[i:i+2] for i in range(len(sequence)-1)]
    dipeptide_counts = Counter(dipeptides)
    total_dipeptides = len(dipeptides)
    dipeptide_composition = [dipeptide_counts.get(aa, 0) / total_dipeptides for aa in (a+b for a in amino_acids for b in amino_acids)]
    return dipeptide_composition


if __name__ == "__main__":
    def loadStrMtx(mtx_path):
        with open(mtx_path, 'r') as f:
            lines = f.readlines()
        contents = [x.split(",") for x in lines]
        return contents

    # seq_path = 'Data/H.pylori/H.pylori.tsv'
    # seq_path = 'Data/PIPR-cut/PIPR_cut_2039_seq.tsv'
    seq_path = 'Data/Human_com/human_com.csv'
    # seq_path = 'Data/Human/human_seq.tsv'

    seq_dict = {}
    aac_representations = {}
    dipeptide_representations = {}
    seq_mtx = loadStrMtx(seq_path)

    # print(seq_mtx)  #id,序列

    print(len(seq_mtx)) #2479条

    n = 0
    for vec in tqdm(seq_mtx):
        n += 1

        seq_dict[vec[0]] = vec[1]  #字典id:seq

        # seq_esm_input = [(vec[0], vec[1])]  #[:1200]string

        # print(token_representations.shape)  # 打印 token_representations 的形

        # out = Model(tokens)
        protein_sequence=vec[1]
        aac = calculate_AAC(protein_sequence)
        dipeptide = calculate_dipeptide_composition(protein_sequence)

        aac_representations[vec[0]] = torch.tensor(aac)
        dipeptide_representations[vec[0]] = torch.tensor(dipeptide)
        print(n)

    # np.savez('Data/PIPR-cut/PIPR_cut_aac.npz', **aac_representations)   #  'Data/Yeast/PIPR-cut/PIPR_cut_2039—esm2.npz'
    # np.savez('Data/PIPR-cut/PIPR_cut_dipeptide.npz', **dipeptide_representations)
    np.savez('Data/Human_com/human_aac.npz', **aac_representations)   #  'Data/Yeast/PIPR-cut/PIPR_cut_2039—esm2.npz'
    np.savez('Data/Human_com/human_dipeptide.npz', **dipeptide_representations)




#P38717	MSVHGRDPKKRQLRLISVAFKEASIDSPSFRASVNFFQTRVDALEDWIEKTVDFFDQKYKVSFEDFRRAKETLLSQLLPPPALLSNGFVSNQSFTPRLIDSFNKDYYDFSMKLLQIVKGDDSSHSTALLELMTTAIEPYRNVRKNFDFYQGKYDSMLASYQAIRISKTSLEPSSIKSDALQLFEVQKNYLKASLDLISAISAVKLSLDKFILESMKVLKSRSIFITKDSGRKIDLSPCINEYLDNYAIWVENSIEGSKVLDSDISNAKKQAYRYTLKRITPSSDTSDYNIRSIHSSKLLSKDTQVPPKSPEKSGWLYMKTQVGKPTREIWVRRWCFLKNAVFGMFLLSPSKTYVEETDKFGVFLTNVRYDPEEDRKFCFEVKIFGNKVTEAHDNMSKDITLVFQTSNYLDLKSWLIAFEATKKYVMSIQHDSLEYELAFKRFSPKFFEFASSTTTSIDQLITTFDKETESLYETLNCSISEYDILTLGEEKVFQFQMPTTPISTKMTQLAILSNFLTKGSWFPNAVLANIWGTTDWSEYTILPGKGKKPSSLLTIDGKRLPIRNSTIYPQYYSNELKVLDLQFKSLVFSPDQRLEKLPEELLLFKFEALWCPNKKQKFSATCFCTKDYIYCYMNSMEFICLTKISLSEIVSVEADRSSKKTLKLYDASGLQMKAIVLFSDYKLIASKLQYLLENKAIKNPNSNEEILVKFEQMEKESQEKKQEELYKIEQENSFDRKATSVSKIIKSRVTFWEMSDDASTLLNRLKKLQTEYSITYNHEYEISSKGLAHILFGDKSNAFPKCLFLARKDGEEHGKRFWYKNKDINGKSQLVRKIPFRLDMTGNFLNTGKYHRDKESKMIFATQRIVKIVDNKYYEVDLDPFFVKVPFCHLLKLSIKFVITESYDVDNHLEIKLNMTASSSSLHVLYKLEYIDSRTGKTIEKLSLAEIICQTWALKFAHSEFLLIRRVLRYYLEKIGKHGKVIKAIKLCGILGVLSNKSEEPATEKNGNSKESESMQYDIRYSCTILFLVFIKLMVYRVTNLTFVFFRILIGILLLCAEKFSRINRMMVVGLLASIMINILLSEKASVPYWSIKRAEKLFHDRLGSDKFTMQRAIYISDSDLLSSQLSVPSNNPIFEKFSEDNFNKDYQYSETRKQLAMRRNELLIELRILQDMEKQLVHDDYEKFLLEEVNKCSMVSIEMTDLWFNDTQLQNYCSICNEELEKLRPPIT
# protein_sequence='MSVHGRDPKKRQLRLISVAFKEASIDSPSFRASVNFFQTRVDALEDWIEKTVDFFDQKYKVSFEDFRRAKETLLSQLLPPPALLSNGFVSNQSFTPRLIDSFNKDYYDFSMKLLQIVKGDDSSHSTALLELMTTAIEPYRNVRKNFDFYQGKYDSMLASYQAIRISKTSLEPSSIKSDALQLFEVQKNYLKASLDLISAISAVKLSLDKFILESMKVLKSRSIFITKDSGRKIDLSPCINEYLDNYAIWVENSIEGSKVLDSDISNAKKQAYRYTLKRITPSSDTSDYNIRSIHSSKLLSKDTQVPPKSPEKSGWLYMKTQVGKPTREIWVRRWCFLKNAVFGMFLLSPSKTYVEETDKFGVFLTNVRYDPEEDRKFCFEVKIFGNKVTEAHDNMSKDITLVFQTSNYLDLKSWLIAFEATKKYVMSIQHDSLEYELAFKRFSPKFFEFASSTTTSIDQLITTFDKETESLYETLNCSISEYDILTLGEEKVFQFQMPTTPISTKMTQLAILSNFLTKGSWFPNAVLANIWGTTDWSEYTILPGKGKKPSSLLTIDGKRLPIRNSTIYPQYYSNELKVLDLQFKSLVFSPDQRLEKLPEELLLFKFEALWCPNKKQKFSATCFCTKDYIYCYMNSMEFICLTKISLSEIVSVEADRSSKKTLKLYDASGLQMKAIVLFSDYKLIASKLQYLLENKAIKNPNSNEEILVKFEQMEKESQEKKQEELYKIEQENSFDRKATSVSKIIKSRVTFWEMSDDASTLLNRLKKLQTEYSITYNHEYEISSKGLAHILFGDKSNAFPKCLFLARKDGEEHGKRFWYKNKDINGKSQLVRKIPFRLDMTGNFLNTGKYHRDKESKMIFATQRIVKIVDNKYYEVDLDPFFVKVPFCHLLKLSIKFVITESYDVDNHLEIKLNMTASSSSLHVLYKLEYIDSRTGKTIEKLSLAEIICQTWALKFAHSEFLLIRRVLRYYLEKIGKHGKVIKAIKLCGILGVLSNKSEEPATEKNGNSKESESMQYDIRYSCTILFLVFIKLMVYRVTNLTFVFFRILIGILLLCAEKFSRINRMMVVGLLASIMINILLSEKASVPYWSIKRAEKLFHDRLGSDKFTMQRAIYISDSDLLSSQLSVPSNNPIFEKFSEDNFNKDYQYSETRKQLAMRRNELLIELRILQDMEKQLVHDDYEKFLLEEVNKCSMVSIEMTDLWFNDTQLQNYCSICNEELEKLRPPIT'

# # 示例蛋白质序列     
# aac = calculate_AAC(protein_sequence)    ##20
# aac=torch.tensor(aac)
# dipeptide = calculate_dipeptide_composition(protein_sequence)   ##400
# dipeptide=torch.tensor(dipeptide)
# print(aac.shape)
# print(dipeptide.shape)